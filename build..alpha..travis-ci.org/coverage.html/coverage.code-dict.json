{"/home/travis/build/npmtest/node-npmtest-npmlist/test.js":"/* istanbul instrument in package npmtest_npmlist */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npmlist/lib.npmtest_npmlist.js":"/* istanbul instrument in package npmtest_npmlist */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npmlist = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npmlist = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npmlist/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npmlist && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npmlist */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npmlist\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npmlist.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npmlist.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npmlist.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npmlist.__dirname + '/lib.npmtest_npmlist.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/bin/npmlist":"#!/usr/bin/env node\n\nrequire('../build/cli');\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/build/cli.js":"'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _commands = require('./commands');\n\nvar _commands2 = _interopRequireDefault(_commands);\n\nvar _npmlist = require('./npmlist');\n\nvar _npmlist2 = _interopRequireDefault(_npmlist);\n\nvar args = process.argv.slice(2);\n\nvar REGEX = {\n  help: /^(?:(?:--)?help|-h)$/,\n  version: /^(?:(?:--)?version|-v)$/,\n  local: /^(?:(?:--)?local|-l)$/,\n  global: /^(?:(?:--)?global|-g)$/,\n  dev: /^(?:(?:--)?dev|-d)$/,\n  prod: /^(?:(?:--)?prod|-p)$/,\n  depth: /^(?:(?:--)?depth|-n)=(\\d+)$/,\n  scope: /^(?:(?:--)?scope|-s)(?:=(local|global))?$/\n};\n\nvar flags = {\n  scope: 'global',\n  depth: 0\n};\n\nvar executed = false;\n\nargs.forEach(function (arg) {\n  var invalid = true;\n\n  for (var option in REGEX) {\n    if (({}).hasOwnProperty.call(REGEX, option)) {\n      var matches = arg.match(REGEX[option]);\n      if (matches) {\n        invalid = false;\n\n        var _matches$slice = matches.slice(1);\n\n        var _matches$slice2 = _slicedToArray(_matches$slice, 1);\n\n        var value = _matches$slice2[0];\n\n        if (_commands2['default'][option]) {\n          _commands2['default'][option].run(value);\n          executed = true;\n        } else {\n          flags[option] = value || option;\n        }\n      }\n    }\n  }\n\n  if (invalid) {\n    _commands2['default'].unknown.run(arg);\n  }\n});\n\nif (!executed) {\n  _commands2['default'].scope.get(function (current) {\n    var global = flags.global;\n    var local = flags.local;\n    var dev = flags.dev;\n    var prod = flags.prod;\n    var scope = flags.scope;\n\n    flags.scope = global || local || current || scope;\n    flags.env = prod || dev;\n    _npmlist2['default'].run(flags);\n  });\n}","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/build/commands.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _commandsHelp = require('./commands/help');\n\nvar _commandsHelp2 = _interopRequireDefault(_commandsHelp);\n\nvar _commandsScope = require('./commands/scope');\n\nvar _commandsScope2 = _interopRequireDefault(_commandsScope);\n\nvar _commandsUnknown = require('./commands/unknown');\n\nvar _commandsUnknown2 = _interopRequireDefault(_commandsUnknown);\n\nvar _commandsVersion = require('./commands/version');\n\nvar _commandsVersion2 = _interopRequireDefault(_commandsVersion);\n\nexports['default'] = {\n  help: _commandsHelp2['default'],\n  version: _commandsVersion2['default'],\n  scope: _commandsScope2['default'],\n  unknown: _commandsUnknown2['default']\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/build/commands/help.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar HELP = '\\n  Usage ' + _chalk2['default'].cyan('npmlist') + ' ' + _chalk2['default'].magenta('[options]') + '\\n\\n  Options:\\n\\n  -h          [--]help           This message\\n  -v          [--]version        Version number\\n  -d          [--]dev            Only devDependencies\\n  -p          [--]prod           Only dependencies\\n  -l          [--]local          Local packages\\n  -g          [--]global         Global packages\\n  -d=n        [--]depth=n        Traverse n levels deep\\n  -s=scope    [--]scope=scope    Set persistent scope [local|global]';\n\nexports['default'] = {\n  run: function run(code) {\n    console.log(HELP);\n    process.exit(code || 0);\n  }\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/build/commands/scope.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _child_process = require('child_process');\n\nvar CONFIG = 'npmlist.scope';\n\nvar FLIP = '(╯°□°）╯︵ ┻━┻ ';\n\nvar UNFLIP = '┬──┬ ﾉ(°—°ﾉ)';\n\nvar ERROR_MSG = '\\n  ' + _chalk2['default'].red(FLIP) + '\\n\\n  Something went terribly wrong...\\n\\n  Let ' + _chalk2['default'].yellow('Nick') + ' know on ' + _chalk2['default'].blue('GitHub (geekjuice/npmlist)') + '\\n  Sorry about that... ' + _chalk2['default'].cyan(UNFLIP);\n\nfunction error() {\n  console.log(ERROR_MSG);\n  process.exit(1);\n}\n\nexports['default'] = {\n  get: function get(cb) {\n    var cmd = 'npm get ' + CONFIG;\n    (0, _child_process.exec)(cmd, function (err, stdout, stderr) {\n      if (err) {\n        error();\n      }\n      stdout = stdout.trim() === 'local' ? 'local' : 'global';\n      cb(stdout);\n    });\n  },\n\n  set: function set(scope) {\n    var cmd = 'npm set ' + CONFIG + ' ' + scope;\n    (0, _child_process.exec)(cmd, function (err, stdout, stderr) {\n      if (err) {\n        error();\n      }\n      console.log('Scope set to ' + _chalk2['default'].cyan(scope));\n      process.exit(0);\n    });\n  },\n\n  run: function run(scope) {\n    if (scope) {\n      this.set(scope);\n    } else {\n      this.get(function (current) {\n        console.log('Current scope: ' + _chalk2['default'].cyan(current));\n      });\n    }\n  }\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/build/commands/unknown.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _help = require('./help');\n\nvar _help2 = _interopRequireDefault(_help);\n\nexports['default'] = {\n  run: function run(opt) {\n    console.log('\\n  Invalid option: ' + _chalk2['default'].yellow(opt));\n    _help2['default'].run(1);\n  }\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/build/commands/version.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _package = require('../../package');\n\nvar _package2 = _interopRequireDefault(_package);\n\nexports['default'] = {\n  run: function run() {\n    console.log('v' + _package2['default'].version);\n    process.exit(0);\n  }\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/build/npmlist.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _child_process = require('child_process');\n\nvar _utils = require('./utils');\n\nvar BUFFER = 4;\n\nvar REGEX = {\n  'package': /^([│ ]*)[└├+`][─-]+┬?\\s+(.*)@(.*)$/,\n  invalid: /^(.*)\\s+invalid$/,\n  unmet: /^.*UNMET DEPENDENCY\\s+(.*)$/,\n  version: /^([\\d.]*)(?:\\s+->\\s+(.*))$/\n};\n\nfunction cmd(flags) {\n  var depth = flags.depth;\n  var env = flags.env;\n  var scope = flags.scope;\n\n  return ['npm ls', '--depth=' + depth, env ? '--' + env : '', scope === 'global' ? '-g' : ''].join(' ');\n}\n\nfunction log(level, msg) {\n  switch (level) {\n    case 2:\n      return _chalk2['default'].red(msg);\n    case 1:\n      return _chalk2['default'].yellow(msg);\n    default:\n      return _chalk2['default'].cyan(msg);\n  }\n}\n\nexports['default'] = {\n  run: function run() {\n    var flags = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    (0, _child_process.exec)(cmd(flags), function (err, stdout, stderr) {\n      if (err) {}\n\n      var pkgs = [];\n      var lines = (0, _utils.clean)(stdout.split('\\n'));\n\n      // Banner\n      var type = flags.env ? flags.env : 'npm';\n      var banner = '\\nInstalled ' + type + ' packages: (' + flags.scope + ')\\n';\n      console.log(_chalk2['default'].blue(banner));\n\n      var maxLength = banner.trim().length - BUFFER;\n\n      lines.forEach(function (line) {\n        var logLevel = 0;\n        var pkgMatches = line.match(REGEX['package']);\n\n        if (pkgMatches) {\n          var _pkgMatches$slice = pkgMatches.slice(1);\n\n          var _pkgMatches$slice2 = _slicedToArray(_pkgMatches$slice, 3);\n\n          var bars = _pkgMatches$slice2[0];\n          var _name = _pkgMatches$slice2[1];\n          var version = _pkgMatches$slice2[2];\n\n          var unmetMatches = _name.match(REGEX.unmet);\n          var invalidMatches = version.match(REGEX.invalid);\n          var versionMatches = version.match(REGEX.version);\n\n          // Check for invalid dependencies\n          if (invalidMatches) {\n            logLevel = 2;\n            version = invalidMatches[1];\n          }\n\n          // Check for UNMET dependencies\n          if (unmetMatches) {\n            logLevel = 1;\n            _name = unmetMatches[1];\n            version = 'UNMET';\n          }\n\n          // Check for linked packages\n          if (versionMatches) {\n            logLevel = 1;\n            version = versionMatches[1];\n          }\n\n          // Format depth and version\n          version = '[' + version + ']';\n          var spaces = new Array(bars.length + 1).join(' ');\n\n          // Calculate longest string\n          var pkgLength = spaces.length + _name.length + version.length;\n          maxLength = Math.max(maxLength, pkgLength);\n\n          pkgs.push({\n            spaces: spaces,\n            name: _name,\n            version: version,\n            pkgLength: pkgLength,\n            logLevel: logLevel\n          });\n        }\n      });\n\n      if (pkgs.length) {\n        pkgs.forEach(function (pkg) {\n          var spaces = pkg.spaces;\n          var name = pkg.name;\n          var version = pkg.version;\n          var pkgLength = pkg.pkgLength;\n          var logLevel = pkg.logLevel;\n\n          var msg = [\n          // Add depth\n          spaces,\n\n          // Top-level or dependency\n          spaces ? _chalk2['default'].black(name) : _chalk2['default'].magenta(name),\n\n          // Dotted spacing\n          _chalk2['default'].black(new Array(maxLength - pkgLength + 1 + BUFFER).join('.')),\n\n          // Version\n          log(logLevel, version)].join('');\n\n          console.log(msg);\n        });\n      } else {\n        var msg = _chalk2['default'].magenta('No packages found.');\n        console.log(msg);\n      }\n    });\n  }\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/build/utils.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nexports['default'] = {\n  clean: function clean(arr) {\n    for (var i = 0; i < arr.length; ++i) {\n      if (!arr[i]) {\n        arr.splice(i, 1);\n        --i;\n      }\n    }\n    return arr;\n  }\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/gulpfile.js":"var del         = require('del');\nvar gulp        = require('gulp');\nvar babel       = require('gulp-babel');\nvar bump        = require('gulp-bump');\nvar filter      = require('gulp-filter');\nvar plumber     = require('gulp-plumber');\nvar tagVersion  = require('gulp-tag-version');\n\n// Variables\nvar input = './lib';\nvar output = './build';\nvar pkg = require('./package.json');\n\n\n// Clean\ngulp.task('clean', function() {\n  del.sync([output]);\n});\n\n\n// Javascript\ngulp.task('js', function() {\n  gulp.src(input + '/**/*.js')\n    .pipe(plumber())\n    .pipe(babel())\n    .pipe(gulp.dest(output));\n});\n\n\n// Version bump\n['patch', 'minor', 'major'].forEach(function(type) {\n  (function(version) {\n    var pkgFilter = filter('package.json');\n    gulp.task('version:' + version, function() {\n      gulp.src(['package.json', 'bower.json'])\n        .pipe(bump({type: version}))\n        .pipe(pkgFilter)\n        .pipe(tagVersion())\n        .pipe(pkgFilter.restore())\n        .pipe(gulp.dest('.'));\n    });\n  })(type);\n});\n\n\n// Watch\ngulp.task('watch', ['build'], function() {\n  gulp.watch(input + '/**/*.js', ['js']);\n});\n\n\n// Defaults\ngulp.task('build', ['clean', 'js']);\ngulp.task('default', ['build']);\n\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/lib/cli.js":"import commands from './commands';\nimport npmlist from './npmlist';\n\nconst args = process.argv.slice(2);\n\nconst REGEX = {\n  help: /^(?:(?:--)?help|-h)$/,\n  version: /^(?:(?:--)?version|-v)$/,\n  local: /^(?:(?:--)?local|-l)$/,\n  global: /^(?:(?:--)?global|-g)$/,\n  dev: /^(?:(?:--)?dev|-d)$/,\n  prod: /^(?:(?:--)?prod|-p)$/,\n  depth: /^(?:(?:--)?depth|-n)=(\\d+)$/,\n  scope: /^(?:(?:--)?scope|-s)(?:=(local|global))?$/\n};\n\nconst flags = {\n  scope: 'global',\n  depth: 0\n};\n\nlet executed = false;\n\nargs.forEach(arg => {\n  let invalid = true;\n\n  for (let option in REGEX) {\n    if ({}.hasOwnProperty.call(REGEX, option)) {\n      const matches = arg.match(REGEX[option]);\n      if (matches) {\n        invalid = false;\n        const [value] = matches.slice(1);\n        if (commands[option]) {\n          commands[option].run(value);\n          executed = true;\n        } else {\n          flags[option] = value || option;\n        }\n      }\n    }\n  }\n\n  if (invalid) {\n    commands.unknown.run(arg);\n  }\n});\n\nif (!executed) {\n  commands.scope.get(current => {\n    const {global, local, dev, prod, scope} = flags;\n    flags.scope = global || local || current || scope;\n    flags.env = prod || dev;\n    npmlist.run(flags);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/lib/commands.js":"import help from './commands/help';\nimport scope from './commands/scope';\nimport unknown from './commands/unknown';\nimport version from './commands/version';\n\nexport default {\n  help,\n  version,\n  scope,\n  unknown\n};\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/lib/npmlist.js":"import chalk from 'chalk';\nimport {exec} from 'child_process';\nimport {clean} from './utils';\n\nconst BUFFER = 4;\n\nconst REGEX = {\n  package: /^([│ ]*)[└├+`][─-]+┬?\\s+(.*)@(.*)$/,\n  invalid: /^(.*)\\s+invalid$/,\n  unmet: /^.*UNMET DEPENDENCY\\s+(.*)$/,\n  version: /^([\\d.]*)(?:\\s+->\\s+(.*))$/\n};\n\nfunction cmd(flags) {\n  const {depth, env, scope} = flags;\n  return [\n    'npm ls',\n    `--depth=${depth}`,\n    env ? `--${env}` : '',\n    scope === 'global' ? '-g' : ''\n  ].join(' ');\n}\n\nfunction log(level, msg) {\n  switch (level) {\n    case 2:\n      return chalk.red(msg);\n    case 1:\n      return chalk.yellow(msg);\n    default:\n      return chalk.cyan(msg);\n  }\n}\n\nexport default {\n  run(flags={}) {\n    exec(cmd(flags), (err, stdout, stderr) => {\n      if (err) {}\n\n      const pkgs = [];\n      const lines = clean(stdout.split('\\n'));\n\n      // Banner\n      const type = flags.env ? flags.env : 'npm';\n      const banner = `\\nInstalled ${type} packages: (${flags.scope})\\n`;\n      console.log(chalk.blue(banner));\n\n      let maxLength = banner.trim().length - BUFFER;\n\n      lines.forEach(line => {\n        let logLevel = 0;\n        let pkgMatches = line.match(REGEX.package);\n\n        if (pkgMatches) {\n          let [bars, name, version] = pkgMatches.slice(1);\n          const unmetMatches = name.match(REGEX.unmet);\n          const invalidMatches = version.match(REGEX.invalid);\n          const versionMatches = version.match(REGEX.version);\n\n          // Check for invalid dependencies\n          if (invalidMatches) {\n            logLevel = 2;\n            version = invalidMatches[1];\n          }\n\n          // Check for UNMET dependencies\n          if (unmetMatches) {\n            logLevel = 1;\n            ([name, version] = [unmetMatches[1], 'UNMET']);\n          }\n\n          // Check for linked packages\n          if (versionMatches) {\n            logLevel = 1;\n            version = versionMatches[1];\n          }\n\n          // Format depth and version\n          version = `[${version}]`;\n          const spaces = new Array(bars.length + 1).join(' ');\n\n          // Calculate longest string\n          const pkgLength = spaces.length + name.length + version.length;\n          maxLength = Math.max(maxLength, pkgLength);\n\n          pkgs.push({\n            spaces,\n            name,\n            version,\n            pkgLength,\n            logLevel\n          });\n        }\n      });\n\n      if (pkgs.length) {\n        pkgs.forEach(pkg => {\n          const {spaces, name, version, pkgLength, logLevel} = pkg;\n          const msg = [\n            // Add depth\n            spaces,\n\n            // Top-level or dependency\n            spaces ? chalk.black(name) : chalk.magenta(name),\n\n            // Dotted spacing\n            chalk.black(new Array(maxLength - pkgLength + 1 + BUFFER).join('.')),\n\n            // Version\n            log(logLevel, version)\n          ].join('');\n\n          console.log(msg);\n        });\n      } else {\n        const msg = chalk.magenta('No packages found.');\n        console.log(msg);\n      }\n\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/lib/utils.js":"import chalk from 'chalk';\n\nexport default {\n  clean(arr) {\n    for (let i = 0; i < arr.length; ++i) {\n      if (!arr[i]) {\n        arr.splice(i, 1);\n        --i;\n      }\n    }\n    return arr;\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/lib/commands/help.js":"import chalk from 'chalk';\n\nconst HELP = `\n  Usage ${chalk.cyan('npmlist')} ${chalk.magenta('[options]')}\n\n  Options:\n\n  -h          [--]help           This message\n  -v          [--]version        Version number\n  -d          [--]dev            Only devDependencies\n  -p          [--]prod           Only dependencies\n  -l          [--]local          Local packages\n  -g          [--]global         Global packages\n  -d=n        [--]depth=n        Traverse n levels deep\n  -s=scope    [--]scope=scope    Set persistent scope [local|global]`;\n\nexport default {\n  run(code) {\n    console.log(HELP);\n    process.exit(code || 0);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/lib/commands/scope.js":"import chalk from 'chalk';\nimport {exec} from 'child_process';\n\nconst CONFIG = 'npmlist.scope';\n\nconst FLIP = '(╯°□°）╯︵ ┻━┻ ';\n\nconst UNFLIP = '┬──┬ ﾉ(°—°ﾉ)';\n\nconst ERROR_MSG = `\n  ${chalk.red(FLIP)}\n\n  Something went terribly wrong...\n\n  Let ${chalk.yellow('Nick')} know on ${chalk.blue('GitHub (geekjuice/npmlist)')}\n  Sorry about that... ${chalk.cyan(UNFLIP)}`;\n\nfunction error() {\n  console.log(ERROR_MSG);\n  process.exit(1);\n}\n\nexport default {\n  get(cb) {\n    const cmd = `npm get ${CONFIG}`;\n    exec(cmd, (err, stdout, stderr) => {\n      if (err) {\n        error();\n      }\n      stdout = stdout.trim() === 'local' ? 'local' : 'global';\n      cb(stdout);\n    });\n  },\n\n  set(scope) {\n    const cmd = `npm set ${CONFIG} ${scope}`;\n    exec(cmd, (err, stdout, stderr) => {\n      if (err) {\n        error();\n      }\n      console.log(`Scope set to ${chalk.cyan(scope)}`);\n      process.exit(0);\n    });\n  },\n\n  run(scope) {\n    if (scope) {\n      this.set(scope);\n    } else {\n      this.get(current => {\n        console.log(`Current scope: ${chalk.cyan(current)}`);\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/lib/commands/unknown.js":"import chalk from 'chalk';\nimport help from './help';\n\nexport default {\n  run(opt) {\n    console.log(`\\n  Invalid option: ${chalk.yellow(opt)}`);\n    help.run(1);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-npmlist/node_modules/npmlist/lib/commands/version.js":"import pkg from '../../package';\n\nexport default {\n  run() {\n    console.log(`v${pkg.version}`);\n    process.exit(0);\n  }\n};\n"}